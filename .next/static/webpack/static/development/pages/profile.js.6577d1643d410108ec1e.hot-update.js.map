{"version":3,"file":"static/webpack/static/development/pages/profile.js.6577d1643d410108ec1e.hot-update.js","sources":["webpack:///./src/components/Modal/index.js","webpack:///./src/hooks/useOnClickOutside.js"],"sourcesContent":["import { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport useOnClickOutside from \"../../hooks/useOnClickOutside\";\nfunction Modal({ children, closeModal = null }) {\n  const ref = useRef();\n  useOnClickOutside(ref, closeModal);\n\n  return (\n    <ModalBackground>\n      <StyledModal ref={ref}>\n        <CloseButton onClick={closeModal}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"feather feather-x-circle\"\n          >\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\n          </svg>\n        </CloseButton>\n        {children}\n      </StyledModal>\n    </ModalBackground>\n  );\n}\n\nconst ModalBackground = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background: rgba(0, 0, 0, 0.2);\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledModal = styled.div`\n  width: 30vw;\n  background: #fff;\n  padding: 2rem;\n  position: relative;\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  border: none;\n  background: none;\n  cursor: pointer;\n`;\n\nexport default Modal;\n","import { useEffect } from \"react\";\n\n// Hook\nfunction useOnClickOutside(ref, handler) {\n  useEffect(\n    () => {\n      const listener = event => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}\n\nexport default useOnClickOutside;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAYA;AAOA;AASA;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;A","sourceRoot":""}